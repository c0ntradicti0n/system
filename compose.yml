version: "3"
services:
  nginx:

    image: nginx:latest
    container_name: nginx
    restart: unless-stopped
    build: nginx
    logging:
      driver: "json-file"
      options:
        max-file: "5"
        max-size: "10m"
    env_file:
      - .env
    environment:
        HOST: $HOST
        EMAIL: $EMAIL
    depends_on:
      - server
      - web
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/sites-enabled/:/etc/nginx/sites-enabled/
      - ./.certs:$CERTS

  server:
    image: server

    logging:
      driver: "json-file"
      options:
        max-file: "5"
        max-size: "10m"

    restart: unless-stopped

    build: server
    container_name: server
    env_file:
      - .env
    tty: true
    user: 1000:1000
    ports:
      - "5001:5000"
    environment:
      DEBUG: "true"
      HOST: $HOST
      SYSTEM: /system
      PYTHONIOENCODING: utf-8
    extra_hosts:
        - "host.docker.internal:host-gateway"
    volumes:
      - "$SYSTEM:/system"
      - "./server:/app"
      - "./lib:/app/lib"

  service:
    image: service

    logging:
      driver: "json-file"
      options:
        max-file: "5"
        max-size: "10m"
    build:
       context: service
       args:
         SYSTEM: /system

    restart: unless-stopped

    container_name: service
    env_file:
      - .env
    tty: true
    user: 1000:1000
    environment:
      DEBUG: "true"
      HOST: $HOST
      SYSTEM: /system
      PYTHONIOENCODING: utf-8
      HAYSTACK_TELEMETRY_ENABLED: "False"
      HF_HUB_DISABLE_TELEMETRY: True
      DISABLE_TELEMETRY: True
    volumes:
      - "$SYSTEM:/system"
      - "./service:/app"
      - "./lib:/app/lib"

      - "./.caches/.cache-cr:/chroma:rw"
      - "./.caches/.cache-hf:/.cache:rw"
  integrator:
    image: integrator:latest

    logging:
      driver: "json-file"
      options:
        max-file: "5"
        max-size: "10m"
    restart: unless-stopped
    ports:
      - "5000:5000"
    build:
      context: integrator
      args:
        SYSTEM: /system

    #restart: unless-stopped

    container_name: integrator
    env_file:
      - .env
    tty: true
    user: 1000:1000

    environment:
      DEBUG: "true"
      PYDEV_DEBUG: "true"
      HOST: $HOST
      SYSTEM: /system
      PYTHONIOENCODING: utf-8
      HAYSTACK_TELEMETRY_ENABLED: "False"
      HF_HUB_DISABLE_TELEMETRY: True
      DISABLE_TELEMETRY: True
      NO_IMAGES: "true"
    volumes:
      - "$SYSTEM:/system"
      - "./integrator:/app"
      - "./classifier:/app/classifier"
      - "./integrator:/app/integrator"
      - "./lib:/app/lib"
      - "./.caches/.cache-cr:/chroma:rw"
      - "./.caches/.cache-hf:/.cache:rw"
      - "./.caches/.cache-mpl:/.config:rw"
      - "./.certs:/certs:ro"

  linker:
    image: linker:latest
    profiles:
      - linker
    mem_limit: 10g

    logging:
      driver: "json-file"
      options:
        max-file: "5"
        max-size: "10m"
    build:
      context: linker
      args:
         SYSTEM: /system
    container_name: linker
    env_file:
      - .env
    tty: true
    user: 1000:1000
    environment:
      DEBUG: "true"
      HOST: $HOST
      SYSTEM: /system
      PYTHONIOENCODING: utf-8
      HAYSTACK_TELEMETRY_ENABLED: "False"
      HF_HUB_DISABLE_TELEMETRY: True
      DISABLE_TELEMETRY: True
    volumes:
      - "$SYSTEM:/system"
      - "./service:/app"
      - "./lib:/app/lib"

      - "./.caches/.cache-cr-linker:/chroma:rw"
      - "./.caches/.cache-hf:/.cache:rw"



  classifier:
    image: classifier

    profiles:
      - classifier
    mem_limit: 10g
    logging:
      driver: "json-file"
      options:
        max-file: "5"
        max-size: "10m"
    build:
      context: classifier
      args:
         SYSTEM: /system
    container_name: classifier
    env_file:
      - .env
    tty: true
    user: 1000:1000
    environment:
      DEBUG: "true"
      HOST: $HOST
      SYSTEM: /system
      PYTHONIOENCODING: utf-8
      HAYSTACK_TELEMETRY_ENABLED: "False"
      HF_HUB_DISABLE_TELEMETRY: True
      DISABLE_TELEMETRY: True
    volumes:
      - "$SYSTEM:/system"
      - "./classifier:/app"
      - "./lib:/app/lib"

      - "./.caches/.cache-cr:/chroma:rw"
      - "./.caches/.cache-hf:/.cache:rw"
      - "./.caches/.models-classifier:/app/models:rw"


  web:
    image: web:latest
    logging:
      driver: "json-file"
      options:
        max-file: "5"
        max-size: "10m"
    build:
      context: web
      target:  $TARGET
    environment:
      WDS_SOCKET_PORT: 80
      DEBUG: engine,socket.io* node

    container_name: web
    volumes:
      - ./web/src:/app/src
    tty: true
    env_file:
      - .env
  redis:
    image: redis:latest
    container_name: redis
    restart: unless-stopped
    ports:
      - 6379:6379
    volumes:
      - ./.caches/.redis:/data
    command: redis-server --appendonly yes

  worker:
    build: worker
    container_name: worker
    command:  ["celery", "-A", "tasks", "worker", "--loglevel=info", "-c", "1"]
    depends_on:
      - redis
    env_file:
      - .env
    environment:
      CELERYD_CONCURRENCY: 1
      SENTENCE_TRANSFORMERS_HOME: /.cache

    volumes:
        - "$SYSTEM:/system"
        - "./integrator:/app/integrator"
        - "./integrator/states:/app/states"
        - "./classifier:/app/classifier"
        - "./lib:/app/lib"
        - "./.caches/.cache-cr:/chroma:rw"
        - "./.caches/.cache-hf:/.cache:rw"
        - "./.caches/.cache-mpl:/.config:rw"

  queue:
    image: queue:latest
    build: worker
    command: ["python", "app.py"]
    #ports:
    #  - "5000:5000"
    container_name: queue

    depends_on:
      - redis
    env_file:
      - .env
    volumes:
      - "$SYSTEM:/system"
      - "./integrator:/app/integrator"
      - "./classifier:/app/classifier"
      - "./lib:/app/lib"
      - "./.caches/.cache-cr:/chroma:rw"
      - "./.caches/.cache-hf:/.cache:rw"
      - "./.caches/.cache-mpl:/.config:rw"